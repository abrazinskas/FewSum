from logging import getLogger
import os
from mltoolkit.mlutils.helpers.formatting.seq import format_seq
from mltoolkit.mldp.utils.constants.vocabulary import START, END, PAD

logger_name = os.path.basename(__file__)
logger = getLogger(logger_name)


class SeqPostProcessor(object):
    """
    Post-processes sequences generated by the model to make them human readable.
    """

    def __init__(self, word_vocab=None, tokenizer=None, detokenizer=None,
                 sent_splitter=None, tcaser=None, retain_end_token=True):
        """
        Args:
            word_vocab: self-explanatory.
            tokenizer: if provided will tokenize and concatenate input tokens.
            detokenizer: used to make the sequence look more like human written.
            sent_splitter: a function that splits a string to sentences. Used
                for capitalisation of first words if provided.
            tcaser: a true casing function
        """
        super(SeqPostProcessor, self).__init__()
        self.word_vocab = word_vocab
        self.tk = tokenizer
        self.dtk = detokenizer
        self.ss = sent_splitter
        self.tc = tcaser
        self.retain_end_token = retain_end_token

    def __call__(self, seq):
        """
        Args:
            seq: list of word ids or tokens.

        Returns:
            list of strings (multiple sentences) or one string.
        """
        #   0. formatting the sequence
        if self.word_vocab is not None:
            seq = format_seq(seq, start=self.word_vocab[START].id,
                             end=self.word_vocab[END].id,
                             pad=self.word_vocab[PAD].id,
                             retain_end=self.retain_end_token)

            #   1. converting ids to tokens
            seq = " ".join([self.word_vocab[id].token for id in seq])

        if self.tk:
            seq = " ".join(self.tk(seq))
        else:
            seq = seq

        #   2. true casing
        if self.tc:
            seq = self.tc(seq)

        #   3. de-tokenizing in order to make it look like a human created text
        if self.dtk:
            seq = self.dtk(seq.split())

        #   4. split into sentences
        if self.ss:
            sents = self.ss(seq)
            #   5. capitalizing the first word in each sentence
            sents = [sent[0].capitalize() + sent[1:] for sent in sents]
            return sents

        return seq
